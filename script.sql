-- 1.0.0

-- TYPE

CREATE TYPE T_NUMBER_20 IS TABLE OF NUMBER(20);
CREATE TYPE T_VARCHAR2_16 IS TABLE OF VARCHAR2(16);
CREATE TYPE T_VARCHAR2_36 IS TABLE OF VARCHAR2(36);
CREATE TYPE T_VARCHAR2_256 IS TABLE OF VARCHAR2(256);
CREATE TYPE T_VARCHAR2_4000 IS TABLE OF VARCHAR2(4000);

-- CHANGE

CREATE TABLE CHANGES (
  CODE    VARCHAR2(32) NOT NULL,
  CHANGED TIMESTAMP    NOT NULL
);

CREATE UNIQUE INDEX CHANGES_CODE_I
  ON CHANGES (CODE);

-- RECEIVER

CREATE TABLE RECEIVER (
  ID         NUMBER(20)                                      NOT NULL,
  CREATETIME TIMESTAMP DEFAULT sys_extract_utc(systimestamp) NOT NULL,
  SERVER     VARCHAR2(32)                                    NULL,
  TYPE       VARCHAR2(10)                                    NOT NULL,
  HOST       VARCHAR2(32)                                    NOT NULL,
  PORT       NUMBER(5)                                       NOT NULL,
  PATH       VARCHAR2(32)                                    NULL
);

ALTER TABLE RECEIVER
  ADD CONSTRAINT RECEIVER_PK PRIMARY KEY (ID)
  USING INDEX;

CREATE UNIQUE INDEX RECEIVER_TYPE
  ON RECEIVER (SERVER, TYPE);

ALTER TABLE RECEIVER
  ADD CONSTRAINT RECEIVER_TYPE_CH CHECK (TYPE IN ('WS', 'RS'));

ALTER TABLE RECEIVER
  ADD CONSTRAINT RECEIVER_PORT_CH CHECK (PORT BETWEEN 0 AND 65536);

CREATE SEQUENCE RECEIVER_SEQ START WITH 1;

CREATE TRIGGER RECEIVER_T
BEFORE INSERT ON RECEIVER
FOR EACH ROW
  BEGIN
    SELECT RECEIVER_SEQ.nextval
    INTO :new.ID
    FROM dual;
  END;

-- SYSTEM

CREATE TABLE SYSTEM (
  ID          NUMBER(20)                                      NOT NULL,
  CREATETIME  TIMESTAMP DEFAULT sys_extract_utc(systimestamp) NOT NULL,
  CODE        VARCHAR2(32)                                    NOT NULL,
  NAME        VARCHAR2(256)                                   NOT NULL,
  DESCRIPTION VARCHAR2(4000)                                  NULL,
  LOCKED      VARCHAR2(1) DEFAULT 'N'                         NOT NULL
);

ALTER TABLE SYSTEM
  ADD CONSTRAINT SYSTEM_PK PRIMARY KEY (ID)
  USING INDEX;

ALTER TABLE SYSTEM
  ADD CONSTRAINT SYSTEM_LOCKED_CH CHECK (LOCKED IN ('Y', 'N'));

CREATE SEQUENCE SYSTEM_SEQ START WITH 1;

CREATE TRIGGER SYSTEM_T
BEFORE INSERT ON SYSTEM
FOR EACH ROW
  BEGIN
    SELECT SYSTEM_SEQ.nextval
    INTO :new.ID
    FROM dual;
  END;

CREATE TRIGGER SYSTEM_CHANGES_T
AFTER INSERT OR UPDATE OR DELETE ON SYSTEM
  BEGIN
    UPDATE CHANGES
    SET CHANGED = sys_extract_utc(systimestamp)
    WHERE CODE = 'SYSTEM';
    IF SQL%ROWCOUNT = 0
    THEN
      INSERT INTO CHANGES (CODE, CHANGED) VALUES ('SYSTEM', sys_extract_utc(systimestamp));
    END IF;
  END;

-- APPLICATION

CREATE TABLE APPLICATION (
  ID           NUMBER(20)                                      NOT NULL,
  CREATETIME   TIMESTAMP DEFAULT sys_extract_utc(systimestamp) NOT NULL,
  OS           VARCHAR2(16)                                    NOT NULL,
  PACKAGE_NAME VARCHAR2(256)                                   NOT NULL
);

ALTER TABLE APPLICATION
  ADD CONSTRAINT APPLICATION_PK PRIMARY KEY (ID)
  USING INDEX;

ALTER TABLE APPLICATION
  ADD CONSTRAINT APPLICATION_OS_CH CHECK (OS IN ('ANDROID', 'IOS', 'WINDOWS_PHONE', 'WINDOWS'));

CREATE UNIQUE INDEX APPLICATION_OS_PN_I
  ON APPLICATION (OS, PACKAGE_NAME);

CREATE SEQUENCE APPLICATION_SEQ START WITH 1;

CREATE TRIGGER APPLICATION_T
BEFORE INSERT ON APPLICATION
FOR EACH ROW
  BEGIN
    SELECT APPLICATION_SEQ.nextval
    INTO :new.ID
    FROM dual;
  END;

CREATE TABLE APPLICATION_ANDROID (
  ID         NUMBER(20)   NOT NULL,
  SERVER_KEY VARCHAR2(64) NOT NULL
);

ALTER TABLE APPLICATION_ANDROID
  ADD CONSTRAINT APPLICATION_ANDROID_FK
FOREIGN KEY (ID) REFERENCES APPLICATION (ID) ON DELETE CASCADE;

CREATE TRIGGER APPLICATION_CHANGES_T
AFTER INSERT OR UPDATE OR DELETE ON APPLICATION
  BEGIN
    UPDATE CHANGES
    SET CHANGED = sys_extract_utc(systimestamp)
    WHERE CODE = 'APPLICATION';
    IF SQL%ROWCOUNT = 0
    THEN
      INSERT INTO CHANGES (CODE, CHANGED) VALUES ('APPLICATION', sys_extract_utc(systimestamp));
    END IF;
  END;

CREATE TRIGGER APPLICATION_ANDROID_CHANGES_T
AFTER INSERT OR UPDATE OR DELETE ON APPLICATION_ANDROID
  BEGIN
    UPDATE CHANGES
    SET CHANGED = sys_extract_utc(systimestamp)
    WHERE CODE = 'APPLICATION';
    IF SQL%ROWCOUNT = 0
    THEN
      INSERT INTO CHANGES (CODE, CHANGED) VALUES ('APPLICATION', sys_extract_utc(systimestamp));
    END IF;
  END;

-- SYSTEM_APPLICATION

CREATE TABLE SYSTEM_APPLICATION (
  SYSTEM_ID      NUMBER(20) NOT NULL,
  APPLICATION_ID NUMBER(20) NOT NULL
);

ALTER TABLE SYSTEM_APPLICATION
  ADD CONSTRAINT SA_SYSTEM_FK
FOREIGN KEY (SYSTEM_ID) REFERENCES SYSTEM (ID) ON DELETE CASCADE;

ALTER TABLE SYSTEM_APPLICATION
  ADD CONSTRAINT SA_APPLICATION_FK
FOREIGN KEY (APPLICATION_ID) REFERENCES APPLICATION (ID) ON DELETE CASCADE;

CREATE TRIGGER SYSTEM_APPLICATION_CHANGES_T
AFTER INSERT OR UPDATE OR DELETE ON SYSTEM_APPLICATION
  BEGIN
    UPDATE CHANGES
    SET CHANGED = sys_extract_utc(systimestamp)
    WHERE CODE = 'APPLICATION';
    IF SQL%ROWCOUNT = 0
    THEN
      INSERT INTO CHANGES (CODE, CHANGED) VALUES ('APPLICATION', sys_extract_utc(systimestamp));
    END IF;
  END;

-- PUSH

CREATE TABLE PUSH (
  ID             NUMBER(20)                                      NOT NULL,
  CREATETIME     TIMESTAMP DEFAULT sys_extract_utc(systimestamp) NOT NULL,
  SYSTEM_ID      NUMBER(20)                                      NOT NULL,
  EXT_ID         VARCHAR2(36)                                    NOT NULL,
  APPLICATION_ID NUMBER(20)                                      NOT NULL,
  TOKEN          VARCHAR2(256)                                   NULL,
  TITLE          VARCHAR2(256)                                   NULL,
  BODY           VARCHAR2(4000)                                  NULL,
  ICON           VARCHAR2(16)                                    NULL
);

ALTER TABLE PUSH
  ADD CONSTRAINT PUSH_PK PRIMARY KEY (ID)
  USING INDEX;

CREATE UNIQUE INDEX PUSH_SYSTEM_EXT_I
  ON PUSH (SYSTEM_ID, EXT_ID);

ALTER TABLE PUSH
  ADD CONSTRAINT PUSH_APPLICATION_FK
FOREIGN KEY (APPLICATION_ID) REFERENCES APPLICATION (ID);

CREATE SEQUENCE PUSH_SEQ START WITH 1;

CREATE TRIGGER PUSH_T
BEFORE INSERT ON PUSH
FOR EACH ROW
  BEGIN
    SELECT PUSH_SEQ.nextval
    INTO :new.ID
    FROM dual;
  END;

CREATE FUNCTION F_INSERT_PUSH(application_id NUMBER,
                              token          VARCHAR2,
                              title          VARCHAR2,
                              body           VARCHAR2,
                              icon           VARCHAR2,
                              system_id      NUMBER,
                              ext_id         VARCHAR2)
  RETURN NUMBER
AS
  id NUMBER(20);
  BEGIN
    INSERT INTO PUSH (APPLICATION_ID, TOKEN, TITLE, BODY, ICON, SYSTEM_ID, EXT_ID)
    VALUES (application_id, token, title, body, icon, system_id, ext_id)
    RETURNING ID INTO id;

    RETURN id;
  END;

CREATE FUNCTION F_INSERT_PUSHES(application_id T_NUMBER_20,
                                token          T_VARCHAR2_256,
                                title          T_VARCHAR2_256,
                                body           T_VARCHAR2_4000,
                                icon           T_VARCHAR2_16,
                                system_id      T_NUMBER_20,
                                ext_id         T_VARCHAR2_36)
  RETURN T_NUMBER_20
AS
  id T_NUMBER_20;
  BEGIN
    id := T_NUMBER_20();
    id.EXTEND(application_id.LAST);

    FOR i IN application_id.FIRST .. application_id.LAST
    LOOP
      id(i) := F_INSERT_PUSH(application_id(i), token(i), title(i), body(i), icon(i), system_id(i), ext_id(i));
    END LOOP;

    RETURN id;
  END;